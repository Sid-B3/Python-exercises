#These are some Numpy commands that can be used to modify data
#Numpy is similar to arrays, but faster to process 
#Importing libraries to use Numpy 
import time 
import sys
import numpy as np 

import matplotlib.pyplot as plt
%matplotlib inline  
#Defining 2 functions we will use later on 
def Plotvec1(u, z, v):
    
    ax = plt.axes()
    ax.arrow(0, 0, *u, head_width=0.05, color='r', head_length=0.1)
    plt.text(*(u + 0.1), 'u')
    
    ax.arrow(0, 0, *v, head_width=0.05, color='b', head_length=0.1)
    plt.text(*(v + 0.1), 'v')
    ax.arrow(0, 0, *z, head_width=0.05, head_length=0.1)
    plt.text(*(z + 0.1), 'z')
    plt.ylim(-2, 2)
    plt.xlim(-2, 2)

def Plotvec2(a,b):
    ax = plt.axes()
    ax.arrow(0, 0, *a, head_width=0.05, color ='r', head_length=0.1)
    plt.text(*(a + 0.1), 'a')
    ax.arrow(0, 0, *b, head_width=0.05, color ='b', head_length=0.1)
    plt.text(*(b + 0.1), 'b')
    plt.ylim(-2, 2)
    plt.xlim(-2, 2)
    
    #End of function definitions 
    
    # Create a python list

a = ["0", 1, "two", "3", 4]
# import numpy library

import numpy as np a = np.array([0, 1, 2, 3, 4])
a
a.dtype
#Find std deviation in array
standard_deviation=a.std()
standard_deviation
min_b = b.min()
min_b

#Practice
a=np.array([1,2,3,4,5])
b=np.array([1,0,1,0,1])
c=a*b
c
#using vector plot function as defined earlier and dot product 
import numpy as np
import matplotlib.pyplot as plt
a=np.array([-1,1])
b=np.array([1,1])
Plotvec2(a,b)
np.dot(a,b)
